{
  "data": {
    "title": "C++递归与暴力枚举",
    "stylesheet": "css/articles/3.css",
    "kind": "技术",
    "kid": 1,
    "date": "2023-1-8",
    "content": "<h1>C++递归与暴力枚举</h1>\n<h2>1.递归</h2>\n<blockquote>\n<p>递归（Recursion）：一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法</p>\n</blockquote>\n<p>在C++中，除main函数以外的函数均可调用自身（在C语言中main函数的递归是被允许的，C++标准中不允许这样，但部分编译器（g++，Visual C++等）为兼容C语言仍然允许main函数递归），这种操作称为递归。</p>\n<h3>1.1 递归的应用</h3>\n<p>看如下问题</p>\n<p>输入长度$l(0&lt;l\\leq129,l=2^n+1,n\\in N^*)$，输出以下图形</p>\n<pre><code class=\"language-c++\">|                                                               |\n|                               |                               |\n|               |               |               |               |\n|       |       |       |       |       |       |       |       |\n|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n\\\\l==65\n</code></pre>\n<p>对于以上问题，不难看到，除第一行外，每一行都在前一行的基础上把段空白的中点填上了<code>'|'</code>直到没有空白，即到达了第$log_2(l-1)$行或填了$log_2(l-1)$次</p>\n<p>于是，我们可以对分别第$n(n\\in[0,log_2(l-1)])$行进行递归，每次递归把对应区间中点填上<code>'|'</code>，分别递归n层，有如下代码</p>\n<pre><code class=\"language-c++\">#include&lt;iostream&gt;\n#include&lt;cmath&gt;\n\nusing namespace std;\n\nchar chs[130];\n\nvoid subdivide(int,int,int);\n\nint main()\n{\n    int l;\n    cin &gt;&gt; l;\n    int n = log2(l-1);\n    for(int i = 0;i &lt; l;i ++) chs[i]=' ';\n    chs[0]='|';\n    chs[l-1]='|';\n    chs[l]='\\0';\n    for(int i = 0;i &lt;= n;i ++)\n    {\n        subdivide(0,l-1,i);\n        cout &lt;&lt; chs &lt;&lt; endl;\n    }\n}\n\nvoid subdivide(int beg,int end,int num)\n{\n    if(!num) return;\n    int mid = (beg+end)/2;\n    chs[mid]='|';\n    subdivide(beg,mid,num-1);\n    subdivide(mid,end,num-1);\n}\n</code></pre>\n<p>在以上问题中，我们把一个大的问题（绘制一个图形），难以解决的问题拆分成一个小的，相对易于解决的问题（分别绘制两边的图形），然后再分，直到分解为一个可以解决的问题（<code>num==1</code>时，问题变为在区间中点绘制<code>'|'</code>），这就是递归。</p>\n<h3>1.2 递归思想及递推</h3>\n<p>用上一节结尾的方法考虑以下问题：</p>\n<blockquote>\n<p>P1255 数楼梯</p>\n<p>楼梯有$N$阶，上楼可以一步上一阶，也可以一步上二阶。</p>\n<p>编一个程序，计算共有多少种不同的走法。</p>\n</blockquote>\n<p>分析可得，上到N阶有两种方法，从N-1阶上或N-2阶上，而且上到1阶只有一种方法，上到2阶有两种方法，那么我们就可以把N阶这样的问题分解为N-1阶和N-2阶这样的小问题，进而分解为1阶和2阶这样可以解决的问题</p>\n<p>有以下递归式\n$$\nans(N)=\\begin{cases} ans(N-1)+ans(N-2),N&gt; 2 \\ 2,N=2 \\ 1,N=1 \\end{cases}\n$$\n我们把从1到N每一阶的走法数量称为该问题的 一个<em><strong>状态</strong></em>，那么这些<em><strong>状态</strong></em>共同组成了这个问题<em><strong>状态空间</strong></em>，而第一阶和第二阶的走法数量是我们已知的，那么这两个<em><strong>状态</strong></em>就是这个问题的<em><strong>问题边界</strong></em>，<em><strong>递归</strong></em>的过程就是以<em><strong>原问题</strong></em>为起点尝试寻找把<em><strong>状态空间</strong></em>缩小到已知的<em><strong>问题边界</strong></em>的路线,再通过该路线反向回溯的遍历方式</p>\n<p>以上问题可使用以下代码描述</p>\n<pre><code class=\"language-c++\">#include&lt;iostream&gt;\n\nlong long ans(int);\n\nint main()\n{\n    int n;\n    std::cin &gt;&gt; n;\n    std::cout &lt;&lt; ans(n);\n    return 0;\n}\n\nlong long ans(int n)\n{\n    if(n &lt;= 2) return n;\n    return ans(n-1)+ans(n-2);\n}\n</code></pre>\n<p>显然，该程序遍历了所有从N到1和到2的路线，其时间复杂度为$O(n[(\\dfrac{1+\\sqrt{5}}{2})^n-(\\dfrac{1-\\sqrt{5}}{2})^n])$，当$N=5000$时，这个数字已经达到了$10^{1063}$级别，时间绝对无法通过要求</p>\n<p>经分析，程序主要问题在于不同的$n$对应$n-1$ $n-2$会重复，即遍历每条路线的过程中都会求解路线中的每个状态，存在大量重复，可以加入去重</p>\n<pre><code class=\"language-c++\">#include&lt;iostream&gt;\n#include&lt;cstring&gt;\n\nlong long ans(int);\n\nlong long sta[5005];\n\nint main()\n{\n    memset(sta,0,sizeof(sta));\n    int n;\n    std::cin &gt;&gt; n;\n    std::cout &lt;&lt; ans(n);\n    return 0;\n}\n\nlong long ans(int n)\n{\n    if(sta[n]) return sta[n];\n    if(n &lt;= 2) return n;\n    return sta[n]=ans(n-1)+ans(n-2);\n}\n</code></pre>\n<p>理论上来说，该程序在遇到已经求解过的状态后会直接返回值，时间复杂度为$O(n)$可以通过，但当$n=5000$时答案在$10^{1059}$数量级，long long也存不下，需要使用高精度，此处不再赘述</p>\n<p>我们换一个角度</p>\n<p>如果我们从一开始就从1阶，2阶推出3阶、4阶直到N阶，是否就可以从根源上避免重复？即从<em><strong>问题边界</strong></em>向<em><strong>原问题</strong></em>正向拓展，我们把这样的方法叫做递推</p>\n<pre><code class=\"language-c++\">#include&lt;iostream&gt;\n\nlong long ans[5005];\n\nint main()\n{\n    ans[1]=1;\n    ans[2]=2;\n    int n;\n    std::cin &gt;&gt; n;\n    for(int i = 3;i &lt;= n;i ++)\n    {\n        ans[i]=ans[i-1]+ans[i-2];\n    }\n    std::cout &lt;&lt; ans[n];\n    return 0;\n}\n</code></pre>\n<p>不难看出，递推就是从<em><strong>问题边界</strong></em>正向推导到<em><strong>原问题</strong></em>，而递归就是从<em><strong>原问题</strong></em>反向归纳到<em><strong>问题边界</strong></em>，最后利用函数回溯来回到<em><strong>原问题</strong></em>解决问题</p>\n<p>整体来说，递推无论从代码复杂度还是逻辑思维的方面都优于递归，但是当遇到问题边界不明了，难以使用递推，或者存在多个与原问题相似的状态空间，这时判断是否达到原问题，以及达不到原问题的尝试都会浪费大量时间，这时递归就会比较好用；同理，当存在多个与问题边界类似的状态，原问题不明了的时候也会出现递推优于递归。而往往大部分问题只能选择其中之一，如第一个问题就难以使用递推，这时就要我们作出判断。</p>\n<blockquote>\n<p>例题1 P1706 全排列问题</p>\n<p>例题2 P1760 通天之汉诺塔</p>\n<p>例题3 P1044 栈</p>\n<p>例题4 P2660 zzc种田</p>\n<p>例题5 P2799 国王的魔镜</p>\n</blockquote>\n<h3>1.3 递归的底层原理</h3>\n<p>以下代码</p>\n<pre><code class=\"language-c++\">int fun(int);\n\nint main()\n{\n\tint i = 12;\n\tint j = fun(14);\n\treturn 0;\n}\n\nint fun(int i)\n{\n\treturn i++;\n}\n</code></pre>\n<p>经过编译</p>\n<pre><code class=\"language-bash\">g++ -S ./t.cpp\n</code></pre>\n<p>产生了如下汇编助记符文件</p>\n<pre><code class=\"language-assembly\">_main:\n\tpushl\t%ebp\t\t\t\t#将EBP压入栈\n\tmovl\t%esp, %ebp\t\t\t#将ESP移到EBP\n\tsubl\t$32, %esp\t\t\t#ESP减32\n\tmovl\t$12, 28(%esp)\t\t#将12保存在ESP加28对应的内存地址（以字节为单位）\n\tmovl\t$14, (%esp)\t\t\t#将14保存在ESP对应内存地址\n\tcall\t__Z3funi\t\t\t#将EIP程序计数器的值压入栈（占8字节），将__Z3funi的地址保存在EIP\n\tmovl\t%eax, 24(%esp)\t\t#将EAX寄存器的值移到ESP加24对应的内存地址\n\tmovl\t$0, %eax\t\t\t#将0保存在EAX\n\tleave\t\t\t\t\t\t#弹出栈帧\n\tret\t\t\t\t\t\t\t#弹出栈顶，并将栈顶的值保存到EIP，结束程序\n__Z3funi:\n\tpushl\t%ebp\t\t\t\t#将EBP压入栈\n\tmovl\t%esp, %ebp\t\t\t#将ESP移到EBP\n\tmovl\t8(%ebp), %eax\t\t#将EBP加8对应的内存地址的值移到EAX\n\tleal\t1(%eax), %edx\t\t#将EAX的值加1保存在EDX\n\tmovl\t%edx, 8(%ebp)\t\t#将EDX移到ESP加8对应的内存地址\n\tpopl\t%ebp\t\t\t\t#弹出栈顶，并将栈顶的值保存到EBP，实现弹出栈帧\n\tret\t\t\t\t\t\t\t#弹出栈顶，并将栈顶的值保存到EIP，结束函数\n#省略伪指令及部分不相关指令\n</code></pre>\n<p>从中可以看出，在调用函数fun（编译后为__Z3funi）后，程序直接将EBP基址寄存器压入栈，将ESP栈指针寄存器的值设为新的EBP，这将使原函数栈帧得到保留，所有数据仍然存在栈中</p>\n<p>在递归中，如果一个递归层数过多，就会导致栈空间过大，而一般的编译器对栈空间的大小是有严格限制的，一旦超出便会导致运行时异常（Runtime Exception）程序将直接退出，后果不堪设想</p>\n<p>该问题的解决方法是尽量避免过大的递归，函数调用中避免传递大型复合数据结构，将大型递归转换为循环等</p>\n<h2>2.暴力枚举</h2>\n<blockquote>\n<p>一个集的枚举是列出某些有穷序列集的所有成员的程序，或者是一种特定类型对象的计数</p>\n</blockquote>\n<p>暴力枚举指列举一个问题所有可能从而得出答案的方法</p>\n<p>暴力枚举在程序设计往往是最有效而最低效的方法，往往能在正式比赛中获得一部分分数</p>\n<h3>2.1 简单枚举</h3>\n<p>看如下问题</p>\n<blockquote>\n<p>P2089 烤鸡</p>\n<p>猪猪 Hanke 特别喜欢吃烤鸡（本是同畜牲，相煎何太急！）Hanke 吃鸡很特别，为什么特别呢？因为他有 10 种配料（芥末、孜然等），每种配料可以放 1 到 3 克，任意烤鸡的美味程度为所有配料质量之和。</p>\n<p>现在， Hanke 想要知道，如果给你一个美味程度 n ，请输出这 10 种配料的所有搭配方案。</p>\n</blockquote>\n<p>可以看到这题就是让我们在1,2,3中挑出10个数使其和为n，这个数据量并不算大可以直接用一个嵌套循环解决</p>\n<pre><code class=\"language-c++\">#include&lt;iostream&gt;\n\nusing namespace std;\n\nint ans[60000][10];\n\nint main()\n{\n    int n;\n    cin &gt;&gt; n;\n    if(n&lt;10||n&gt;30)\n    {\n        cout &lt;&lt; 0;\n        return 0;\n    }\n    int sum = 0;\n    for(int a = 1;a &lt;= 3;a ++)\n        for(int b = 1;b &lt;= 3;b ++)\n            for(int c = 1;c &lt;= 3;c ++)\n                for(int d = 1;d &lt;= 3;d ++)\n                    for(int e = 1;e &lt;= 3;e ++)\n                        for(int f = 1;f &lt;= 3;f ++)\n                            for(int g = 1;g &lt;= 3;g ++)\n                                for(int h = 1;h &lt;= 3;h ++)\n                                    for(int i = 1;i &lt;= 3;i ++)\n                                        for(int j = 1;j &lt;= 3;j ++)\n                                        {\n                                            if(a+b+c+d+e+f+g+h+i+j==n)\n                                            {\n                                                ans[sum][0]=a;\n                                                ans[sum][1]=b;\n                                                ans[sum][2]=c;\n                                                ans[sum][3]=d;\n                                                ans[sum][4]=e;\n                                                ans[sum][5]=f;\n                                                ans[sum][6]=g;\n                                                ans[sum][7]=h;\n                                                ans[sum][8]=i;\n                                                ans[sum][9]=j;\n                                                sum++;\n                                            }\n                                        }\n    cout &lt;&lt; sum &lt;&lt; endl;\n    for(int i = 0;i &lt; sum;i ++)cout &lt;&lt; ans[i][0] &lt;&lt; &quot; &quot; &lt;&lt; ans[i][1] &lt;&lt; &quot; &quot; &lt;&lt; ans[i][2] &lt;&lt; &quot; &quot; &lt;&lt; ans[i][3] &lt;&lt; &quot; &quot; &lt;&lt; ans[i][4] &lt;&lt; &quot; &quot; &lt;&lt; ans[i][5] &lt;&lt; &quot; &quot; &lt;&lt; ans[i][6] &lt;&lt; &quot; &quot; &lt;&lt; ans[i][7] &lt;&lt; &quot; &quot; &lt;&lt; ans[i][8] &lt;&lt; &quot; &quot; &lt;&lt; ans[i][9] &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p>这也就是最原始的暴力枚举：枚举每一种情况，判断符不符合答案，但是答案实际情况往往不会这么理想</p>\n<blockquote>\n<p>P2241 统计方形</p>\n<p>有一个$ n \\times m $方格的棋盘，求其方格包含多少正方形、长方形（不包含正方形）。</p>\n</blockquote>\n<p>如果暴力枚举，最先想到的自然是枚举两个点确定一个矩形，此时时间复杂度为$O(n^2m^2)$，在本题显然无法通过</p>\n<p>我们可以换一种枚举策略</p>\n<p>事实上当我们给出一个点后，以该点为端点的矩形数量都可以通过数学计算得出：对于点$(x,y)$，以其为端点的矩形数量恰好是$mn$（棋盘上除了它所在行和所在列以外的点数，点数总共为$(m+1)(n+1)=mn+m+n+1$，$(m+1)(n+1)-(m+1)-(n+1)+1=mn$）而正方形数量恰好是以其为中心的两条斜直线上点长度，可用$min(x,y)+min(n-x,y)+min(x,m-y)+min(n-x,m-y)$计算，矩形数减掉正方形数即为长方形数</p>\n<pre><code class=\"language-c++\">#include&lt;iostream&gt;\n#include&lt;cmath&gt;\n\nusing namespace std;\n\nint main()\n{\n    long long n,m,a=0,b=0;\n    cin &gt;&gt; n &gt;&gt; m;\n    for(long long x = 0; x&lt;= n;x ++)\n        for(long long y = 0; y &lt;= m;y ++)\n        {\n            long long sq = min(x,y)+min(n-x,y)+min(x,m-y)+min(n-x,m-y);\n            b+=sq;\n            a+=m*n;\n            a-=sq;\n        }\n    a/=4;\n    b/=4;\n    cout &lt;&lt; b &lt;&lt; &quot; &quot; &lt;&lt; a;\n    return 0;\n}\n</code></pre>\n<p>用该方法枚举出的结果会出现同一个矩形枚举4个端点的过程中枚举了4遍，所以结果要除以4</p>\n<p>如何免去这个重复的枚举呢</p>\n<p>我们可以只枚举右下角的端点，那么对于每个点我们就只用考虑左上的矩形了</p>\n<pre><code class=\"language-c++\">#include&lt;iostream&gt;\n#include&lt;cmath&gt;\n\nusing namespace std;\n\nint main()\n{\n    long long n,m,a=0,b=0;\n    cin &gt;&gt; n &gt;&gt; m;\n    for(long long x = 0; x&lt;= n;x ++)\n        for(long long y = 0; y &lt;= m;y ++)\n        {\n            long long sq = min(x,y);\n            b+=sq;\n            a+=x*y;\n            a-=sq;\n        }\n    cout &lt;&lt; b &lt;&lt; &quot; &quot; &lt;&lt; a;\n    return 0;\n}\n</code></pre>\n<p>如果改用边长来枚举，那么这个算法还能继续优化，此处不再赘述</p>\n<p>综上所述，从不同角度枚举往往能带来不同的枚举量，如何选择枚举的角度和如何减少枚举量是暴力枚举问题最核心的问题</p>\n<h3>2.2 子集枚举</h3>\n<blockquote>\n<p>P1157 组合的输出</p>\n<p>排列与组合是常用的数学方法，其中组合就是从 $n$ 个元素中抽出 $r$ 个元素（不分顺序且 $r \\le n$），我们可以简单地将 $n$ 个元素理解为自然数 $1,2,\\dots,n$，从中任取 $r$ 个数。</p>\n<p>现要求你输出所有组合。</p>\n</blockquote>\n<p>如何枚举一个集合中的元素？</p>\n<p>对于某个全集的一个子集，那么全集中的每一个元素只有两种状态：在这个子集中或者不在这个子集中，利用这一特性，我们就可以用一个二进制数字表示一个集合的子集。在这个数字中，每位对应全集中的一个元素，0表示不在子集中，1表示在子集中，那么一个有$n$个元素的集合的所有子集就可以用数字$0$到$2^n-1$表示，可以以此实现子集枚举</p>\n<h4>注意：C++中的位运算</h4>\n<p>C++中的整数采用补码表示法，最高位0表示非负数，1表示负数，非负数表示值与实际值是一样的，而负数则需要在实际值上减掉$2^n$来表示，对于4位的数字使用补码表示法有以下几个示例</p>\n<pre><code>0000:0(0)\n0001:1(1)\n1111:-1(15)\n1110:-2(14)\n1000:-8(8)\n0111:7(7)\n//二进制数:补码表示数(实际值)\n</code></pre>\n<p>C++中存在以下几个常用位运算符</p>\n<pre><code class=\"language-c++\">&amp; //按位与\n| //按位或\n^ //按位异或\n&lt;&lt; //左移位\n&gt;&gt; //右移位\n</code></pre>\n<p>其中<code>&amp;、|</code>就是对每一位进行与、或</p>\n<p>&amp;按位与存在以下性质：一个操作数为1时保持另一个数不变，一个操作数为0时返回0，故常用在掩码运算、二进制下的数位分离</p>\n<p>^按位异或(也写作XOR)存在以下性质：两个操作数相同则输出0，不同则输出1（按位）</p>\n<p>当一个操作数为1时，相当于对另一个操作数取反，当一个操作数为0时，相当于保持另一个操作数不变</p>\n<p><code>(A &lt;&lt; n) == A*pow(2,n)</code></p>\n<p><code>(1 &lt;&lt; n) == pow(2,n)</code></p>\n<p><code>(A &gt;&gt; n) == A/pow(2,n)</code></p>\n<p>以上所有均不处理溢出，这也意味着左移位导致符号位改变时会引发很多不必要的麻烦</p>\n<p>回到子集枚举，由位运算的性质，我们可以得出以下式子</p>\n<p>$ A \\cup B$ <code>A|B</code></p>\n<p>$A\\cap B$ <code>A&amp;B</code></p>\n<p>$C^A_B$ <code>A^B</code></p>\n<p>$A \\in B$ <code> (B&gt;&gt;(n-1))&amp;1</code></p>\n<p>$A \\subset B$ <code>((A|B)==B)&amp;&amp;((A&amp;B)==A)</code></p>\n<p>回到题目本身</p>\n<p>题目要求我们字典序输出，那么我们只要从$2^n -1$反向枚举到$0$，再让最高位表示1就行了</p>\n<p>代码如下</p>\n<pre><code class=\"language-c++\">#include&lt;cstdio&gt;\n\nint n,r;\nint ans[30];\n\nint main()\n{\n    scanf(&quot;%d %d&quot;,&amp;n,&amp;r);\n    for(int set = (1&lt;&lt;n)-1;set&gt;=0;set--)\n    {\n        int index = 0;\n        for(int i = 1;i &lt;= n;i++)\n        {\n            if((set&gt;&gt;(n-i))&amp;1)ans[index++]=i;\n        }\n        if(index == r)\n        {\n            for(int i = 0;i &lt; r;i ++) printf(&quot;%3d&quot;,ans[i]);\n           printf(&quot;%c&quot;,'\\n');\n        }\n    }\n}\n</code></pre>\n<h3>2.3 排列枚举</h3>\n<p>排列枚举，即枚举所有元素的排列，对于这样的组合问题，我们有一个简便方法</p>\n<p>STL中的algorithm头文件中提供了两个函数<code>next_permutation(begin,end)</code>和<code>prev_permutation(begin,end)</code>分别提供区间$[begin,end)$中元素的下一个排列和上一个排列（按字典序），当没有可用排列时返回0</p>\n<blockquote>\n<p>P1706 全排列问题</p>\n</blockquote>\n<p>本题已经用递归做过一次，但是用现在的排列枚举会更简单</p>\n<p>由于$1,2,3,\\dots,n$的排列就是字典序最小的排列，故从这里开始循环调用<code>next_permutation(begin,end)</code>就可以保证枚举 所有排列</p>\n<pre><code class=\"language-c++\">#include&lt;cstdio&gt;\n#include&lt;algorithm&gt;\n\nint main()\n{\n    int ans[10];\n    int n;\n    scanf(&quot;%d&quot;,&amp;n);\n    for(int i = 0;i &lt; n; i++)\n    {\n        ans[i]=i+1;\n    }\n    do\n    {\n        for(int i = 0;i &lt; n; i++)\n            printf(&quot;%5d&quot;,ans[i]);\n        printf(&quot;%c&quot;,'\\n');\n    }while(std::next_permutation(ans,ans+n));\n    return 0;\n}\n</code></pre>\n<blockquote>\n<p>例题1 P1088 火星人</p>\n<p>例题2 P1014 Cantor表</p>\n<p>例题3 P1469 找筷子</p>\n</blockquote>"
  }
}